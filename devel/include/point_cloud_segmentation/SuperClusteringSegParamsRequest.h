// Generated by gencpp from file point_cloud_segmentation/SuperClusteringSegParamsRequest.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_SEGMENTATION_MESSAGE_SUPERCLUSTERINGSEGPARAMSREQUEST_H
#define POINT_CLOUD_SEGMENTATION_MESSAGE_SUPERCLUSTERINGSEGPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_segmentation
{
template <class ContainerAllocator>
struct SuperClusteringSegParamsRequest_
{
  typedef SuperClusteringSegParamsRequest_<ContainerAllocator> Type;

  SuperClusteringSegParamsRequest_()
    : voxel_resolution(0.0)
    , seed_resolution(0.0)
    , color_importance(0.0)
    , spatial_importance(0.0)
    , normal_importance(0.0)
    , threshold(0.0)
    , rgb_color_space(false)
    , convexity_criterion(false)
    , adapt_lambda(false)
    , equalization(false)  {
    }
  SuperClusteringSegParamsRequest_(const ContainerAllocator& _alloc)
    : voxel_resolution(0.0)
    , seed_resolution(0.0)
    , color_importance(0.0)
    , spatial_importance(0.0)
    , normal_importance(0.0)
    , threshold(0.0)
    , rgb_color_space(false)
    , convexity_criterion(false)
    , adapt_lambda(false)
    , equalization(false)  {
  (void)_alloc;
    }



   typedef float _voxel_resolution_type;
  _voxel_resolution_type voxel_resolution;

   typedef float _seed_resolution_type;
  _seed_resolution_type seed_resolution;

   typedef float _color_importance_type;
  _color_importance_type color_importance;

   typedef float _spatial_importance_type;
  _spatial_importance_type spatial_importance;

   typedef float _normal_importance_type;
  _normal_importance_type normal_importance;

   typedef float _threshold_type;
  _threshold_type threshold;

   typedef uint8_t _rgb_color_space_type;
  _rgb_color_space_type rgb_color_space;

   typedef uint8_t _convexity_criterion_type;
  _convexity_criterion_type convexity_criterion;

   typedef uint8_t _adapt_lambda_type;
  _adapt_lambda_type adapt_lambda;

   typedef uint8_t _equalization_type;
  _equalization_type equalization;





  typedef boost::shared_ptr< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SuperClusteringSegParamsRequest_

typedef ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<std::allocator<void> > SuperClusteringSegParamsRequest;

typedef boost::shared_ptr< ::point_cloud_segmentation::SuperClusteringSegParamsRequest > SuperClusteringSegParamsRequestPtr;
typedef boost::shared_ptr< ::point_cloud_segmentation::SuperClusteringSegParamsRequest const> SuperClusteringSegParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.voxel_resolution == rhs.voxel_resolution &&
    lhs.seed_resolution == rhs.seed_resolution &&
    lhs.color_importance == rhs.color_importance &&
    lhs.spatial_importance == rhs.spatial_importance &&
    lhs.normal_importance == rhs.normal_importance &&
    lhs.threshold == rhs.threshold &&
    lhs.rgb_color_space == rhs.rgb_color_space &&
    lhs.convexity_criterion == rhs.convexity_criterion &&
    lhs.adapt_lambda == rhs.adapt_lambda &&
    lhs.equalization == rhs.equalization;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_segmentation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7dd191b5149b3c94cf53205856b53c7f";
  }

  static const char* value(const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7dd191b5149b3c94ULL;
  static const uint64_t static_value2 = 0xcf53205856b53c7fULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_segmentation/SuperClusteringSegParamsRequest";
  }

  static const char* value(const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 voxel_resolution\n"
"float32 seed_resolution\n"
"float32 color_importance\n"
"float32 spatial_importance\n"
"float32 normal_importance\n"
"float32 threshold\n"
"bool rgb_color_space\n"
"bool convexity_criterion\n"
"bool adapt_lambda\n"
"bool equalization\n"
;
  }

  static const char* value(const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.voxel_resolution);
      stream.next(m.seed_resolution);
      stream.next(m.color_importance);
      stream.next(m.spatial_importance);
      stream.next(m.normal_importance);
      stream.next(m.threshold);
      stream.next(m.rgb_color_space);
      stream.next(m.convexity_criterion);
      stream.next(m.adapt_lambda);
      stream.next(m.equalization);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SuperClusteringSegParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_segmentation::SuperClusteringSegParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "voxel_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.voxel_resolution);
    s << indent << "seed_resolution: ";
    Printer<float>::stream(s, indent + "  ", v.seed_resolution);
    s << indent << "color_importance: ";
    Printer<float>::stream(s, indent + "  ", v.color_importance);
    s << indent << "spatial_importance: ";
    Printer<float>::stream(s, indent + "  ", v.spatial_importance);
    s << indent << "normal_importance: ";
    Printer<float>::stream(s, indent + "  ", v.normal_importance);
    s << indent << "threshold: ";
    Printer<float>::stream(s, indent + "  ", v.threshold);
    s << indent << "rgb_color_space: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rgb_color_space);
    s << indent << "convexity_criterion: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.convexity_criterion);
    s << indent << "adapt_lambda: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.adapt_lambda);
    s << indent << "equalization: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.equalization);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_SEGMENTATION_MESSAGE_SUPERCLUSTERINGSEGPARAMSREQUEST_H
