// Generated by gencpp from file point_cloud_segmentation/BaseSegmentationParamsRequest.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_SEGMENTATION_MESSAGE_BASESEGMENTATIONPARAMSREQUEST_H
#define POINT_CLOUD_SEGMENTATION_MESSAGE_BASESEGMENTATIONPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_segmentation
{
template <class ContainerAllocator>
struct BaseSegmentationParamsRequest_
{
  typedef BaseSegmentationParamsRequest_<ContainerAllocator> Type;

  BaseSegmentationParamsRequest_()
    : x_cutoff()
    , y_cutoff()
    , z_cutoff()  {
    }
  BaseSegmentationParamsRequest_(const ContainerAllocator& _alloc)
    : x_cutoff(_alloc)
    , y_cutoff(_alloc)
    , z_cutoff(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _x_cutoff_type;
  _x_cutoff_type x_cutoff;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _y_cutoff_type;
  _y_cutoff_type y_cutoff;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _z_cutoff_type;
  _z_cutoff_type z_cutoff;





  typedef boost::shared_ptr< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BaseSegmentationParamsRequest_

typedef ::point_cloud_segmentation::BaseSegmentationParamsRequest_<std::allocator<void> > BaseSegmentationParamsRequest;

typedef boost::shared_ptr< ::point_cloud_segmentation::BaseSegmentationParamsRequest > BaseSegmentationParamsRequestPtr;
typedef boost::shared_ptr< ::point_cloud_segmentation::BaseSegmentationParamsRequest const> BaseSegmentationParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x_cutoff == rhs.x_cutoff &&
    lhs.y_cutoff == rhs.y_cutoff &&
    lhs.z_cutoff == rhs.z_cutoff;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_segmentation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f6f54b90feaf8d3f28f0f1c6adf313b";
  }

  static const char* value(const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f6f54b90feaf8d3ULL;
  static const uint64_t static_value2 = 0xf28f0f1c6adf313bULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_segmentation/BaseSegmentationParamsRequest";
  }

  static const char* value(const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] x_cutoff\n"
"float32[] y_cutoff\n"
"float32[] z_cutoff\n"
;
  }

  static const char* value(const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_cutoff);
      stream.next(m.y_cutoff);
      stream.next(m.z_cutoff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseSegmentationParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_segmentation::BaseSegmentationParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "x_cutoff[]" << std::endl;
    for (size_t i = 0; i < v.x_cutoff.size(); ++i)
    {
      s << indent << "  x_cutoff[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.x_cutoff[i]);
    }
    s << indent << "y_cutoff[]" << std::endl;
    for (size_t i = 0; i < v.y_cutoff.size(); ++i)
    {
      s << indent << "  y_cutoff[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.y_cutoff[i]);
    }
    s << indent << "z_cutoff[]" << std::endl;
    for (size_t i = 0; i < v.z_cutoff.size(); ++i)
    {
      s << indent << "  z_cutoff[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.z_cutoff[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_SEGMENTATION_MESSAGE_BASESEGMENTATIONPARAMSREQUEST_H
