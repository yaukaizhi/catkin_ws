// Generated by gencpp from file point_cloud_segmentation/PlaneSegmentationParamsRequest.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_SEGMENTATION_MESSAGE_PLANESEGMENTATIONPARAMSREQUEST_H
#define POINT_CLOUD_SEGMENTATION_MESSAGE_PLANESEGMENTATIONPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_segmentation
{
template <class ContainerAllocator>
struct PlaneSegmentationParamsRequest_
{
  typedef PlaneSegmentationParamsRequest_<ContainerAllocator> Type;

  PlaneSegmentationParamsRequest_()
    : inlier_threshold(0.0)
    , max_iters(0)  {
    }
  PlaneSegmentationParamsRequest_(const ContainerAllocator& _alloc)
    : inlier_threshold(0.0)
    , max_iters(0)  {
  (void)_alloc;
    }



   typedef float _inlier_threshold_type;
  _inlier_threshold_type inlier_threshold;

   typedef int32_t _max_iters_type;
  _max_iters_type max_iters;





  typedef boost::shared_ptr< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlaneSegmentationParamsRequest_

typedef ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<std::allocator<void> > PlaneSegmentationParamsRequest;

typedef boost::shared_ptr< ::point_cloud_segmentation::PlaneSegmentationParamsRequest > PlaneSegmentationParamsRequestPtr;
typedef boost::shared_ptr< ::point_cloud_segmentation::PlaneSegmentationParamsRequest const> PlaneSegmentationParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.inlier_threshold == rhs.inlier_threshold &&
    lhs.max_iters == rhs.max_iters;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_segmentation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f59114d8d02ae7d822f03227e75ae1a";
  }

  static const char* value(const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f59114d8d02ae7dULL;
  static const uint64_t static_value2 = 0x822f03227e75ae1aULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_segmentation/PlaneSegmentationParamsRequest";
  }

  static const char* value(const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 inlier_threshold\n"
"int32 max_iters\n"
;
  }

  static const char* value(const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inlier_threshold);
      stream.next(m.max_iters);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlaneSegmentationParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_segmentation::PlaneSegmentationParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "inlier_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.inlier_threshold);
    s << indent << "max_iters: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_iters);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_SEGMENTATION_MESSAGE_PLANESEGMENTATIONPARAMSREQUEST_H
