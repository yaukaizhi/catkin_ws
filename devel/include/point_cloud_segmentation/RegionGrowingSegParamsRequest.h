// Generated by gencpp from file point_cloud_segmentation/RegionGrowingSegParamsRequest.msg
// DO NOT EDIT!


#ifndef POINT_CLOUD_SEGMENTATION_MESSAGE_REGIONGROWINGSEGPARAMSREQUEST_H
#define POINT_CLOUD_SEGMENTATION_MESSAGE_REGIONGROWINGSEGPARAMSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace point_cloud_segmentation
{
template <class ContainerAllocator>
struct RegionGrowingSegParamsRequest_
{
  typedef RegionGrowingSegParamsRequest_<ContainerAllocator> Type;

  RegionGrowingSegParamsRequest_()
    : min_cluster_size(0)
    , max_cluster_size(0)
    , number_of_neighbors(0)
    , smoothness_threshold(0.0)
    , curvature_threshold(0.0)  {
    }
  RegionGrowingSegParamsRequest_(const ContainerAllocator& _alloc)
    : min_cluster_size(0)
    , max_cluster_size(0)
    , number_of_neighbors(0)
    , smoothness_threshold(0.0)
    , curvature_threshold(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _min_cluster_size_type;
  _min_cluster_size_type min_cluster_size;

   typedef int32_t _max_cluster_size_type;
  _max_cluster_size_type max_cluster_size;

   typedef int32_t _number_of_neighbors_type;
  _number_of_neighbors_type number_of_neighbors;

   typedef float _smoothness_threshold_type;
  _smoothness_threshold_type smoothness_threshold;

   typedef float _curvature_threshold_type;
  _curvature_threshold_type curvature_threshold;





  typedef boost::shared_ptr< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RegionGrowingSegParamsRequest_

typedef ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<std::allocator<void> > RegionGrowingSegParamsRequest;

typedef boost::shared_ptr< ::point_cloud_segmentation::RegionGrowingSegParamsRequest > RegionGrowingSegParamsRequestPtr;
typedef boost::shared_ptr< ::point_cloud_segmentation::RegionGrowingSegParamsRequest const> RegionGrowingSegParamsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.min_cluster_size == rhs.min_cluster_size &&
    lhs.max_cluster_size == rhs.max_cluster_size &&
    lhs.number_of_neighbors == rhs.number_of_neighbors &&
    lhs.smoothness_threshold == rhs.smoothness_threshold &&
    lhs.curvature_threshold == rhs.curvature_threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator1> & lhs, const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace point_cloud_segmentation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd9520a3184deb762b75616b536b765e";
  }

  static const char* value(const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd9520a3184deb76ULL;
  static const uint64_t static_value2 = 0x2b75616b536b765eULL;
};

template<class ContainerAllocator>
struct DataType< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "point_cloud_segmentation/RegionGrowingSegParamsRequest";
  }

  static const char* value(const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 min_cluster_size\n"
"int32 max_cluster_size\n"
"int32 number_of_neighbors\n"
"float32 smoothness_threshold\n"
"float32 curvature_threshold\n"
;
  }

  static const char* value(const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.min_cluster_size);
      stream.next(m.max_cluster_size);
      stream.next(m.number_of_neighbors);
      stream.next(m.smoothness_threshold);
      stream.next(m.curvature_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegionGrowingSegParamsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::point_cloud_segmentation::RegionGrowingSegParamsRequest_<ContainerAllocator>& v)
  {
    s << indent << "min_cluster_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_cluster_size);
    s << indent << "max_cluster_size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_cluster_size);
    s << indent << "number_of_neighbors: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_neighbors);
    s << indent << "smoothness_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.smoothness_threshold);
    s << indent << "curvature_threshold: ";
    Printer<float>::stream(s, indent + "  ", v.curvature_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POINT_CLOUD_SEGMENTATION_MESSAGE_REGIONGROWINGSEGPARAMSREQUEST_H
