# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from point_cloud_segmentation/SuperClusteringSegParamsRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SuperClusteringSegParamsRequest(genpy.Message):
  _md5sum = "7dd191b5149b3c94cf53205856b53c7f"
  _type = "point_cloud_segmentation/SuperClusteringSegParamsRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 voxel_resolution
float32 seed_resolution
float32 color_importance
float32 spatial_importance
float32 normal_importance
float32 threshold
bool rgb_color_space
bool convexity_criterion
bool adapt_lambda
bool equalization
"""
  __slots__ = ['voxel_resolution','seed_resolution','color_importance','spatial_importance','normal_importance','threshold','rgb_color_space','convexity_criterion','adapt_lambda','equalization']
  _slot_types = ['float32','float32','float32','float32','float32','float32','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       voxel_resolution,seed_resolution,color_importance,spatial_importance,normal_importance,threshold,rgb_color_space,convexity_criterion,adapt_lambda,equalization

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SuperClusteringSegParamsRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.voxel_resolution is None:
        self.voxel_resolution = 0.
      if self.seed_resolution is None:
        self.seed_resolution = 0.
      if self.color_importance is None:
        self.color_importance = 0.
      if self.spatial_importance is None:
        self.spatial_importance = 0.
      if self.normal_importance is None:
        self.normal_importance = 0.
      if self.threshold is None:
        self.threshold = 0.
      if self.rgb_color_space is None:
        self.rgb_color_space = False
      if self.convexity_criterion is None:
        self.convexity_criterion = False
      if self.adapt_lambda is None:
        self.adapt_lambda = False
      if self.equalization is None:
        self.equalization = False
    else:
      self.voxel_resolution = 0.
      self.seed_resolution = 0.
      self.color_importance = 0.
      self.spatial_importance = 0.
      self.normal_importance = 0.
      self.threshold = 0.
      self.rgb_color_space = False
      self.convexity_criterion = False
      self.adapt_lambda = False
      self.equalization = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.voxel_resolution, _x.seed_resolution, _x.color_importance, _x.spatial_importance, _x.normal_importance, _x.threshold, _x.rgb_color_space, _x.convexity_criterion, _x.adapt_lambda, _x.equalization))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.voxel_resolution, _x.seed_resolution, _x.color_importance, _x.spatial_importance, _x.normal_importance, _x.threshold, _x.rgb_color_space, _x.convexity_criterion, _x.adapt_lambda, _x.equalization,) = _get_struct_6f4B().unpack(str[start:end])
      self.rgb_color_space = bool(self.rgb_color_space)
      self.convexity_criterion = bool(self.convexity_criterion)
      self.adapt_lambda = bool(self.adapt_lambda)
      self.equalization = bool(self.equalization)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f4B().pack(_x.voxel_resolution, _x.seed_resolution, _x.color_importance, _x.spatial_importance, _x.normal_importance, _x.threshold, _x.rgb_color_space, _x.convexity_criterion, _x.adapt_lambda, _x.equalization))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.voxel_resolution, _x.seed_resolution, _x.color_importance, _x.spatial_importance, _x.normal_importance, _x.threshold, _x.rgb_color_space, _x.convexity_criterion, _x.adapt_lambda, _x.equalization,) = _get_struct_6f4B().unpack(str[start:end])
      self.rgb_color_space = bool(self.rgb_color_space)
      self.convexity_criterion = bool(self.convexity_criterion)
      self.adapt_lambda = bool(self.adapt_lambda)
      self.equalization = bool(self.equalization)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f4B = None
def _get_struct_6f4B():
    global _struct_6f4B
    if _struct_6f4B is None:
        _struct_6f4B = struct.Struct("<6f4B")
    return _struct_6f4B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from point_cloud_segmentation/SuperClusteringSegParamsResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SuperClusteringSegParamsResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "point_cloud_segmentation/SuperClusteringSegParamsResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success

"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SuperClusteringSegParamsResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SuperClusteringSegParams(object):
  _type          = 'point_cloud_segmentation/SuperClusteringSegParams'
  _md5sum = '856257f6ec8c4470a3201718c51e1da6'
  _request_class  = SuperClusteringSegParamsRequest
  _response_class = SuperClusteringSegParamsResponse
